{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","None","sortBy","setSortBy","isReversed","setIsReversed","allGoods","goods","preparedGoods","sort","a","b","Alpha","localeCompare","Length","length","reverse","getPreparedGoods","isReset","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,cAAAA,E,gBAAAA,E,SAAAA,M,KAmCE,IAAME,EAAgB,WAC3B,MAA4BC,mBAASH,EAASI,MAA9C,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EA9BR,SAA0BC,EACxBL,EACAE,GACA,IAAMI,EAAa,YAAOD,GAqB1B,OAnBIL,GACFM,EAAcC,MAAK,SAACC,EAAGC,GACrB,OAAQT,GACN,KAAKL,EAASe,MACZ,OAAOF,EAAEG,cAAcF,GAEzB,KAAKd,EAASiB,OACZ,OAAOJ,EAAEK,OAASJ,EAAEI,OAEtB,QACE,OAAO,MAKXX,GACFI,EAAcQ,UAGTR,EAMUS,CAAiBnB,EAAiBI,EAAQE,GAMrDc,EAAUhB,GAAUE,EAE1B,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEE,IACE,SACA,UACA,CAAE,WAAYnB,IAAWL,EAASe,QAGtCU,QAAS,kBAAMnB,EAAUN,EAASe,QATpC,iCAcA,wBACEQ,KAAK,SACLD,UACEE,IACE,SACA,aACA,CAAE,WAAYnB,IAAWL,EAASiB,SAGtCQ,QAAS,kBAAMnB,EAAUN,EAASiB,SATpC,4BAcA,wBACEM,KAAK,SACLD,UACEE,IACE,SACA,aACA,CAAE,YAAajB,IAGnBkB,QAAS,kBAAMjB,GAAeD,IAThC,qBAcCc,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QAxDQ,WAChBnB,EAAUN,EAASI,MACnBI,GAAc,IAmDR,sBAUJ,6BACGC,EAASiB,KAAI,SAAAC,GAAI,OAChB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YCvHnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e9f85a1c.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Alpha = 'alpha',\n  Length = 'length',\n  None = '',\n}\n\ntype IsReverse = boolean;\n\nfunction getPreparedGoods(goods: string[],\n  sortBy: SortType,\n  isReversed: IsReverse) :string[] {\n  const preparedGoods = [...goods];\n\n  if (sortBy) {\n    preparedGoods.sort((a, b) => {\n      switch (sortBy) {\n        case SortType.Alpha:\n          return a.localeCompare(b);\n\n        case SortType.Length:\n          return a.length - b.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortBy, setSortBy] = useState(SortType.None);\n  const [isReversed, setIsReversed] = useState(false);\n  const allGoods = getPreparedGoods(goodsFromServer, sortBy, isReversed);\n  const resetSort = () => {\n    setSortBy(SortType.None);\n    setIsReversed(false);\n  };\n\n  const isReset = sortBy || isReversed;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button',\n              'is-info',\n              { 'is-light': sortBy !== SortType.Alpha },\n            )\n          }\n          onClick={() => setSortBy(SortType.Alpha)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button',\n              'is-success',\n              { 'is-light': sortBy !== SortType.Length },\n            )\n          }\n          onClick={() => setSortBy(SortType.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button',\n              'is-warning',\n              { 'is-light': !isReversed },\n            )\n          }\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {isReset && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={resetSort}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {allGoods.map(good => (\n          <li key={good} data-cy=\"Good\">{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}